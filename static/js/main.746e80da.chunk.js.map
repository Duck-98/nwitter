{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","auth","initializeApp","getAuth","dbService","getFirestore","storageService","getStorage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setnewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","nweet","newNweet","setNewNweet","NweetTextRef","doc","id","NweetImageRef","ref","attachmentUrl","onDeleteClick","window","confirm","deleteDoc","deleteObject","toggleEditing","updateDoc","console","log","autoFocus","src","alt","width","height","faTrash","faPencilAlt","NweetFactory","userObj","attachment","setAttachment","setNweet","e","attachmentRef","uid","v4","uploadString","response","getDownloadURL","createdAt","Date","now","creatorId","addDoc","collection","fileInput","useRef","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","current","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","query","orderBy","snapshot","nweetArray","docs","map","data","key","Navigation","display","justifyContent","marginTop","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setnewDisplayName","updateProfile","getMyNweets","q","where","getDocs","forEach","signOut","push","AppRouter","isLoggedIn","maxWidth","margin","exact","path","from","App","init","setInit","currentUser","setIsLoggedIn","setUserObj","setNewRendering","onAuthStateChanged","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.746e80da.chunk.js","sourcesContent":["// fBase.js\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport {getStorage} from \"firebase/storage\";\n\n // 파이어베이스 데이터베이스를 사용하기 위해 import 함\n\nconst firebaseConfig = {\napiKey: process.env.REACT_APP_API_KEY,\nauthDomain: process.env.REACT_APP_AUTH_DOMAIN,\nprojectId: process.env.REACT_APP_PROJECT_ID,\nstorageBucket: process.env.REACT_APP_STORAGE_BUCKET,\nmessagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\nappId: process.env.REACT_APP_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig); // eslint-disable-line no-unused-vars\n\nexport const auth = getAuth();\nexport const dbService = getFirestore();\nexport const storageService = getStorage();\n","import React, { useState } from 'react';\nimport {auth} from \"fbase\"; // eslint-disable-line no-unused-vars\nimport {\n    createUserWithEmailAndPassword,\n    GithubAuthProvider,\n    GoogleAuthProvider,\n    signInWithEmailAndPassword,\n    signInWithPopup,\n    getAuth,\n    provider // eslint-disable-line no-unused-vars\n    } from \"@firebase/auth\";\n\n\nconst AuthForm = () =>{\n    \n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setnewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n       const {\n           target:{name, value},\n          }   = event;\n          if(name === \"email\"){\n              setEmail(value);\n          }else if(name === \"password\"){\n              setPassword(value);\n          }\n        }\n    const onSubmit = async (event) =>{ // 서버로 값을 요청해서 받는 시간이 걸리기 때문에 async를 사용\n        event.preventDefault();\n        try{\n           const auth = getAuth(); \n           let data; \n           if(newAccount) {\n            const data = await createUserWithEmailAndPassword(auth, email, password); // eslint-disable-line no-unused-vars\n            } else {\n            const data = await signInWithEmailAndPassword(auth, email, password); // eslint-disable-line no-unused-vars\n            }\n            \n        }catch (error){\n            setError(error.message); // 같은 이메일계정으로 다시 만든다면 오류가 발생\n        }\n    };\n const toggleAccount = () =>{\n     setnewAccount((prev) => !prev);\n }   \n    \n    \n    return(\n        <>\n        <form onSubmit = {onSubmit} className=\"container\">\n            <input name=\"email\" type =\"text\" placeholder=\"Email\" required value={email} onChange={onChange} className=\"authInput\"/>\n            <input name=\"password\" type =\"password\" placeholder=\"Password\" required value = {password} onChange={onChange} className=\"authInput\"/>\n            <input type =\"submit\" value={newAccount ? \"create Account\" : \"Login\"}\n            className=\"authInput authSubmit\" />\n            {error && <span className=\"authError\">{error}</span>} \n        </form>\n        <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ? \"Sign in\" : \"Create Account\" } </span>  \n\n</>\n    )\n};\n\nexport default AuthForm;","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from '@fortawesome/free-brands-svg-icons';\n\nimport React from 'react';\nimport {auth} from \"fbase\"; // eslint-disable-line no-unused-vars\nimport AuthForm from 'components/AuthForm';\n\nimport {\n\n    GithubAuthProvider,\n    GoogleAuthProvider,\n    signInWithPopup,\n    // eslint-disable-line no-unused-vars\n    } from \"@firebase/auth\";\n\nconst Auth = () =>{\n    \n const onSocialClick =  async (event) =>{\n     const {target:{name},\n    } = event;\n    let provider;\n    if(name === \"Google\"){\n        provider = new GoogleAuthProvider();\n    }else if(name === \"Github\"){\n        provider = new GithubAuthProvider();\n    }\n    await signInWithPopup(auth, provider);\n };\n    return (\n      \n<div className=\"authContainer\">\n    <FontAwesomeIcon\n     icon={faTwitter}\n     color={\"#04AAFF\"}\n     size=\"3x\"\n     style={{marginBottom : 30}}\n    />\n    <AuthForm />    \n    <div className=\"authBtns\">\n        <button name=\"Google\" className=\"authBtn\" onClick ={onSocialClick} >\n            Continue with Google<FontAwesomeIcon icon={faGoogle}/></button>\n        <button name=\"Github\" className=\"authBtn\" onClick ={onSocialClick} >\n            Continue with Github<FontAwesomeIcon icon={faGithub}/></button>\n    </div>\n</div>\n    );\n} \n\n\nexport default Auth;","import React ,{useState}from \"react\";\nimport { dbService, storageService } from 'fbase';\nimport {doc,deleteDoc,updateDoc} from \"firebase/firestore\";\nimport { deleteObject, ref } from '@firebase/storage';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n\n\nconst Nweet = ({nweetObj, isOwner}) =>{\n    const [editing, setEditing] = useState(false);\n    // 이 코드는 수정 버튼을 클릭했을 때 입력란과 버튼이 뜨게하는 기준점임.\n    const [newNweet, setNewNweet] = useState(nweetObj.nweet)\n    // 수정할 때 입력란에 기존의 트윗을 나타내기 위한 state\n    const NweetTextRef = doc(dbService,\"nweets\", `${nweetObj.id}`); \n    const NweetImageRef = ref(storageService, nweetObj.attachmentUrl);\n    // 데이터베이스에서 트윗의 아이디를 찾기 위한 코드.\n\n    const onDeleteClick = async () => { // 트윗 삭제 함수\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");        \n        if(ok){\n           await deleteDoc(NweetTextRef); // 트윗 글 삭제기능\n           await deleteObject(NweetImageRef); // 트윗 이미지 삭제\n        };\n    }\n\n    const toggleEditing = () => {setEditing((prev) => !prev)}\n    \n    const onSubmit =  async (event) => {\n        event.preventDefault();\n        await updateDoc(NweetTextRef,{\n        nweet: newNweet,\n        });\n        setEditing(false);\n        console.log(nweetObj.id, newNweet);\n    }\n    const onChange = (event) => {\n        const {\n            target : {value},\n        } = event;\n        setNewNweet(value);\n    } // 입력란에 택스트를 입력해야하는 경우 onchange프롭스, 함수 작업을 해야한다.\n\n\n    return (\n    <div className=\"nweet\"> \n        {editing ? (\n            <>\n            <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                <input onChange={onChange} type=\"text\" placeholder =\"Edit you tweet!\" value={newNweet} required autoFocus className=\"formInput\"/>\n                <input type =\"submit\" className=\"formBtn\" value=\"Update tweet\"/>\n            </form>\n            <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\n            </>\n        ) : (\n            <>\n            <h4>{nweetObj.nweet}</h4>\n            {nweetObj.attachmentUrl &&(\n                 <img src  ={nweetObj.attachmentUrl} alt='~' width=\"50px\" height=\"50px\" />\n            )}\n            {isOwner && (\n                <div className=\"nweet__actions\">\n                    <span onClick={onDeleteClick}>\n                        <FontAwesomeIcon icon={faTrash} />\n                    </span>\n                    <span onClick={toggleEditing}>\n                        <FontAwesomeIcon icon={faPencilAlt} />\n                    </span>           \n                </div>\n            )}\n            </>\n        )}\n    </div>\n    );\n};\n\nexport default Nweet;","import { getDownloadURL, ref, uploadString} from \"@firebase/storage\";\nimport { storageService } from 'fbase';\nimport { v4 } from 'uuid';\nimport React,{useState, useRef} from \"react\";\nimport {addDoc, collection} from \"firebase/firestore\";\nimport { dbService } from 'fbase';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst NweetFactory = ({userObj}) =>{\n    const [attachment, setAttachment] = useState(\"\"); // 사진파일 url을 관리하기 위한 state\n    const [nweet, setNweet] = useState(\"\");\n\n    const onSubmit = async (e) => {\n        \n        e.preventDefault();\n        if (nweet === \"\") {\n            return;\n          }\n        let attachmentUrl =\"\"\n        if(attachment !== \"\"){\n            const attachmentRef = ref(storageService, `${userObj.uid}/${v4()}`);\n            const response = await uploadString(attachmentRef, attachment, \"data_url\");\n            console.log(getDownloadURL(response.ref));\n            attachmentUrl = await getDownloadURL(response.ref);\n        }\n        const nweetObj = {\n            nweet,\n            createdAt: Date.now(),\n            creatorId : userObj.uid, // db에 유저아이디 추가\n            attachmentUrl\n        }\n        await addDoc(collection(dbService, \"nweets\"),(nweetObj)); \n        setNweet(\"\");\n        setAttachment(\"\");\n\n    };\n\n    \n    const onChange = (event) =>{\n        const {target : {value},\n        }= event;\n        setNweet(value);\n    };\n    const onFileChange = (event) =>{\n        const {target : {files},\n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader(); \n        reader.onloadend = (finishedEvent) => { \n            const {\n                currentTarget  : {result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile); // 파일 정보를 인자로 받아 파일 위치를 url로 반환해줌.\n    }; // 사진 파일 업로드 코드\n    \n    const fileInput = useRef(); //  이미지 파일명을 지우기 위해 useRef 훅 사용\n\n    const onClearPhoto= () =>{\n        setAttachment(\"\");\n        fileInput.current.value= null;\n    } \n    \n    return(\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n          <input\n            className=\"factoryInput__input\"\n            value={nweet}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"What's on your mind?\"\n            maxLength={120}\n          />\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n        <label for=\"attach-file\" className=\"factoryInput__label\">\n          <span>Add photos</span>\n          <FontAwesomeIcon icon={faPlus} />\n        </label>\n        <input\n          id=\"attach-file\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{\n            opacity: 0,\n          }}\n        />\n         {attachment && (\n           <div className=\"factoryForm__attachment\">\n           <img\n             src={attachment}\n             style={{\n               backgroundImage: attachment,\n             }}\n           />\n           <div className=\"factoryForm__clear\" onClick={onClearPhoto}>\n             <span>Remove</span>\n             <FontAwesomeIcon icon={faTimes} />\n           </div>\n           </div>\n        )}\n\n    </form>\n    );\n};\n\nexport default NweetFactory;","import { dbService } from 'fbase';\nimport React,{useState, useEffect} from \"react\";\nimport {collection,query, onSnapshot,orderBy} from \"firebase/firestore\";\nimport Nweet from \"components/Nweet\"\nimport NweetFactory from 'components/NweetFactory';\n\n\nconst Home = ({userObj}) => {\n    \n    const [nweets, setNweets] = useState([]); //  트윗들을  상태로 받아서 보관해야하기 때문에 배열로 usestate 생성\n    \n    useEffect(() => {\n        onSnapshot( // OnSnapshot 함수를 이용하여 모든 스냅샷을 반환함.\n        query(collection(dbService, \"nweets\"), orderBy(\"createdAt\", \"desc\")),\n        (snapshot) => {\n        const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id, // map 함수를 이용하여 스냅샷에서 원하는 데이터만 뽑아서 배열화 시킨 후 화면에 나타냄.\n        ...doc.data(), // 전에 사용했던 Foreach함수는 매 순회마다 setNweets를 사용해야하지만, map함수는 순회하면서 만든 배열을 반환하므로\n                        // 반환한 배열을 1번만 setNweet함수에 전달하면 되기 때문에 훨씬 효율적이다.\n        }));\n        setNweets(nweetArray);\n        }\n        );\n        }, []);\n\nreturn (\n    <div className=\"container\">\n    <NweetFactory userObj={userObj} />\n    <div> \n        {nweets.map((nweet) => (\n// map 함수를 이용하여 nweets 배열을 순회하면서 jsx를 반환하게 만들어서 트윗 배열들을 웹에 나타냄.\n        <Nweet \n        key={nweet.id} \n        nweetObj={nweet}\n        isOwner={nweet.creatorId === userObj.uid}\n         // isOwner  nweet.creatorId === userObj.uid가 같아야 권한을 줄 수 있게 설정.\n        />\n            ))}\n    </div>\n    </div>        \n    );\n};\n\n\nexport default Home;","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({userObj}) => \n<nav>\n    <ul  style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n    <li>\n        <Link to =\"/\" style={{ marginRight: 10 }}><FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" /></Link>\n    </li>\n    <li>\n    <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj?.displayName ? userObj.displayName : \"유저\"}의 Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n\n    </li>\n    </ul>\n </nav>\n\nexport default Navigation ","import React from 'react';\nimport { auth,dbService } from 'fbase';\nimport { useEffect , useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { collection, getDocs, query, where } from \"@firebase/firestore\";\nimport { updateProfile } from '@firebase/auth';\n\nconst Profile = ({userObj, refreshUser}) => {\n    const history = useHistory();\n    const [newDisplayName, setnewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick =() =>{\n        auth.signOut();\n        history.push(\"/\");\n    };\n    const onChange = (event) =>{\n        const {\n            target : {value},\n        } = event;\n        setnewDisplayName(value);\n    }\n    const onSubmit = async (event) =>{\n        event.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await updateProfile(userObj, { displayName: newDisplayName });\n            refreshUser();\n            }  // 유저이름과 새로운 이름이 같지 않으면 firebase의 updateProfile을 이용하여 새로운 이름으로 업데이트해줌.\n    }\n    const getMyNweets = async () => {\n        const q = query(\n            collection(dbService, \"nweets\"),\n            where(\"creatorId\", \"==\", userObj.uid)\n            );\n\n        const querySnapshot = await getDocs(q); // querysnapshot-> firebase 쿼리함수. \n        querySnapshot.forEach((doc) => {\n            console.log(doc.id, \" => \", doc.data())\n            ;\n        });           \n        };\n        \n    useEffect(()=> {\n        getMyNweets();\n    },[]);\n    \n    \n    return (\n        \n        <div className=\"container\">\n        <form onSubmit={onSubmit} className=\"profileForm\">\n          <input\n            onChange={onChange}\n            type=\"text\"\n            autoFocus\n            placeholder=\"Display name\"\n            value={newDisplayName}\n            className=\"formInput\"\n          />\n          <input\n            type=\"submit\"\n            value=\"Update Profile\"\n            className=\"formBtn\"\n            style={{\n              marginTop: 10,\n            }}\n          />\n        </form>\n        <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n        </span>\n        \n\n        </div>\n        \n        );\n    \n    }\n   \nexport default Profile         ","import React from 'react'\nimport { HashRouter as Router, Route, Switch,Redirect} from \"react-router-dom\";// as를 이용하여 HashRouter의 이름을 Router로 변경.\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Navigation from './Navigation';\nimport Profile from 'routes/Profile';\n\n\nconst AppRouter = ({isLoggedIn, userObj,refreshUser}) =>{ //Router을 이미 정의했기 때문에 다른 이름으로 정의\n    //상위 컴포넌트에서 받은 프롭스는 구조분해 할당으로 사용\n   \n    return( // switch를 이용하면 여러가지 라우트 중 하나만 렌더링하게 해줌.\n        <Router>\n            {isLoggedIn &&<Navigation userObj={userObj}/>} \n            {/* && -> 로그인이 맞다면 Navigation => true*/}\n            <Switch>  \n                {isLoggedIn ?( // 로그인 상태 시\n                <div\n                style={{\n                  maxWidth: 890,\n                  width: \"100%\",\n                  margin: \"0 auto\",\n                  marginTop: 80,\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                    <Route exact path =\"/\">  \n                        <Home userObj={userObj} />\n                    </Route>  \n                    <Route exact path =\"/profile\">  \n                    <Profile refreshUser={refreshUser} userObj={userObj} />\n                </Route>\n                <Redirect from=\"*\" to=\"/\" />\n                </div> \n                ) : ( // 비로그인 상태 시\n                    <>\n                    <Route exact path =\"/\"> \n                        <Auth />\n                    </Route>   \n                    <Redirect from=\"*\" to=\"/\" />\n                    </>\n                )}\n            </Switch>\n        </Router>\n    )\n}\nexport default AppRouter;  ","import React from 'react';\nimport AppRouter from 'components/Router';\nimport {useState, useEffect} from \"react\";\nimport { auth } from \"fbase\";\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\n\n\nfunction App() {\n  \n  const [init, setInit] = useState(false)\n  const [isLoggedIn, setIsLoggedIn] = useState(auth.currentUser)\n  const [userObj, setUserObj] = useState(null); // 로그인 정보관리를 위한 useState\n  const [newRendering, setNewRendering] = useState(\"\");\n\n  useEffect(() => {\n    auth.onAuthStateChanged((user) =>{\n      if(user){\n        setIsLoggedIn(true);\n        setUserObj(user);\n      }else{\n        setIsLoggedIn(false) \n      }\n      setInit(true);\n    });\n  }, []);\n\n  \n  const refreshUser = () => { // userObj를 새로고침해주는 함수\n    const user = auth.currentUser;\n    setNewRendering(user.displayName);\n    };\n\n  return (\n    <>\n  {init ? <AppRouter refreshUser = {refreshUser} isLoggedIn = {isLoggedIn} userObj={userObj} /> : \"Initialzizing..\"} \n  {/* userObj를 AppRouter을 이용하여 보냄 */}\n\n   </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"/Users/duckuengna/Desktop/Coding/트위터 클론코딩/projects/nwitter/src/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}